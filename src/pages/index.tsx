import AppBanner from '@/components/shared/AppBanner';
import MaxWidthContainer from '@/components/shared/MaxWidthContainer';
import HomePageSection from '@/components/home/HomePageSection';
import AppFooter from '@/components/shared/AppFooter';
import { Node } from '@/props/Node';
import Head from 'next/head';
import { GetServerSideProps, NextPage } from 'next';
import axios from 'axios';
import NodeCardSection from '@/components/home/NodeCardSection';

type Props = {
	nodes: Node[];
	serializedNodesValue: string;
};

export const getServerSideProps: GetServerSideProps<Props> = async () => {
	const [nodesResponse, cryptocurrenciesResponse] = await Promise.all([
		axios.get(`${process.env.API_BASE_URL}/node`),
		axios.get(`${process.env.API_BASE_URL}/cryptocurrency`),
	]);

	const nodesData = nodesResponse.data;
	const cryptocurrenciesData = cryptocurrenciesResponse.data;

	const nodes = [];
	const nodesValue = new Map<string, number>();

	for (const node of nodesData) {
		if (node.status !== 'ACTIVE') {
			continue;
		}

		if (nodesValue.has(node.coin)) {
			for (const cryptocurrency of cryptocurrenciesData.data) {
				if (node.lastReward.amount.coin === cryptocurrency.symbol) {
					const currValue = nodesValue.get(node.coin);
					if (typeof currValue === 'number') {
						nodesValue.set(
							node.coin,
							currValue + (cryptocurrency.quote.USD.price * parseFloat(node.lastReward.amount.amount))
						);
					}
					
				}
			}

		} else {
			nodes.push(node);
			nodesValue.set(node.coin, 0);
			for (const cryptocurrency of cryptocurrenciesData.data) {
				if (node.lastReward.amount.coin === cryptocurrency.symbol) {
					nodesValue.set(node.coin, cryptocurrency.quote.USD.price * parseFloat(node.lastReward.amount.amount));
				}
			}
		}
	}

	const serializedNodesValue = JSON.stringify(
		Array.from(nodesValue.entries())
	);

	return {
		props: {
			nodes,
			serializedNodesValue,
		},
		// revalidate: 60,
	};
};

const HOME_PAGE_SECTIONS = [
	{
		darkBg: false,
		heading: 'MasterNodes',
		subheading: 'Earn passive income by staking your crypto assets',
		type: 'block',
	},
	{
		darkBg: false,
		heading: 'Staking',
		subheading: 'Earn passive income by staking your crypto assets',
		type: 'block',
	},
];

const Home: NextPage<Props> = ({
	nodes,
	serializedNodesValue
}) => {
	const nodesValue: Map<string, number> = new Map(
		JSON.parse(serializedNodesValue)
	);

	return (
		<>
			<Head>
				<title>Cake MasterNodes</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="min-h-screen flex flex-col">
				<AppBanner darkBg={true} />
				<div className="flex-grow">
					<MaxWidthContainer darkBg={false}>
						<div className="grid grid-cols-1 md:grid-cols-2 gap-5">
							{HOME_PAGE_SECTIONS.map(section => (
								<HomePageSection
									key={section.heading}
									{...section}
								/>
							))}
						</div>
						<div className="grid grid-cols-1 md:grid-cols-2 gap-5">
							{nodes.map(node => (
								<NodeCardSection
									key={node.coin}
									node={node}
									nodesValue={nodesValue}
								/>
							))}
						</div>
					</MaxWidthContainer>
				</div>
				<AppFooter />
			</main>
		</>
	);
};

export default Home;
